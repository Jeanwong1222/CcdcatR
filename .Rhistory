apply(itembank_1,2,as.numeric)
itembank_linear = list(apply(itembank_1,2,as.numeric),
apply(itembank_2,2,as.numeric),
apply(itembank_3,2,as.numeric),
apply(itembank_4,2,as.numeric),
apply(itembank_5,2,as.numeric))
itembank_linear
#==============================================================================
#==============================================================================
# Before simulation
# Useful functions
#---------- ETA for one examinee OR more than one examinees ----------#
# eta is a parameter requried in DINA model
# denote whether the i_th examinee possesses all the attributes of item j
# eta = 1 indicates all the required attributes are mastered, 0 otherwise
ETA <- function(N,alpha,Q){
J <- nrow(Q)
if (N == 1){ # for one person, alpha & eta are vectors
eta <- numeric(J)
for(j in 1:J){
e <- 1
K <- ncol(Q)
for (k in 1:K){
e <- e*(alpha[k]^Q[j,k])
}
eta[j] <- e
}
}else{ # for more than one person, alpha & eta are matrix
eta <- matrix(NA, N, J)
for (i in 1:N){
for (j in 1:J){
e <- 1
K <- ncol(Q)
for (k in 1:K){
e <- e*(alpha[i,k]^Q[j,k])
}
eta[i,j] <- e
}
}
}
return(eta)
}
#---------- item response function (DINA) ----------#
# the probability of the correct answer on item j for examinee i
# given the person's alpha mastery profile
P.DINA <- function(N,slip,guess,eta){
J <- length(slip)
if (N==1){ # for one person, eta & p are vectors
p <- numeric(J)
for (j in 1:J){
p[j] <- ((1 - slip[j])^eta[j])*(guess[j]^(1-eta[j]))
}
}else{ # for more than one person, eta & p are matrices
p <- matrix(NA, N, J)
for (i in 1:N){
for (j in 1:J){
p[i,j] <- ((1 - slip[j])^eta[i,j])*(guess[j]^(1-eta[i,j]))
}
}
}
return(p)
}
#----------- response.gen ----------#
# generate response matrix based on the DINA model
response.gen <- function(N,slip,guess,eta){
n.items <- length(slip)  #number of items
n.subjects <- N #number of subjects
# calculate the probabilities using the P.DINA function
p <- P.DINA(N,slip,guess,eta)
if (n.subjects==1){ # for one item, resp is vector
resp <- numeric(n.items)
for (j in 1:n.items) {
if (p[j] > runif(1)){
resp[j] <- 1
} else {
resp[j] <- 0
}
}
}else{ # for more than one item, resp is matrix
resp <- matrix(NA,nrow = n.subjects, ncol = n.items)
for (i in 1:n.subjects) {
for (j in 1:n.items) {
if (p[i,j] > runif(1)){
resp[i,j] <- 1
} else {
resp[i,j] <- 0
}
}
}
}
return(resp)
}
#---------- Joint Maximum Likelihood Estimation ----------#
# the conditional likelihood of Xi (the responses of examinee i)
Xi.likelihood <- function(N,J,p,X){
if (N==1){ # for one person, p & X are vectors
l <- numeric(J)
for (j in 1:J){
l[j] <- (p[j]^X[j]) * ((1 - p[j])^(1 - X[j]))
}
like <- prod(l)
}else{ # for more than one person, p & X are matrices
like <- numeric(N)
l <- matrix(NA, N, J)
for (i in 1:N){
for (j in 1:J){
l[i,j] <- (p[i,j]^X[i,j])*((1-p[i,j])^(1-X[i,j]))
}
like[i] <- prod(l[i,])
}
}
return(like)
}
#----------- PCCR (Pattern correct classification rate) ----------#
# quantifies the estimation accuracy of the entire cognitive profile
# I is the indicator function
PCCR <- function(alpha_true, alpha_estimated){
N <- dim(alpha_true)[1]
I <- apply(alpha_true == alpha_estimated, 1, all)
I <- as.integer(I)
PCCR_value <- sum(I) / N
return(PCCR_value)
}
#----------- ACCR (Attribute correct classification rate) ----------#
# quantifies the estimation accuracy of each individual attribute
ACCR <- function(alpha_true, alpha_estimated){
N <- nrow(alpha_true)
K <- ncol(alpha_true)
ACCR_value <- numeric(K)
for (k in 1:K) {
correct_predictions <- sum(alpha_true[, k] == alpha_estimated[, k])
ACCR_value[k] <- correct_predictions / N
}
return(ACCR_value)
}
#----------- load useful packages ----------#
library(MASS) # For statistical functions
library(gtools) # For combination calculations
library(cdcatR) # For CD-CAT
library(CDM)
#==============================================================================
#==============================================================================
# Step1: Item Bank Design and Calibration
K <- 4  # Number of attributes
S <- 4 # Number of content areas
J <- 20 # Total number of items in each small item pool
# Create basic matrix units
Q_0 <- matrix(c(1,0,0,0,
0,1,0,0,
0,0,1,0,
0,0,0,1), nrow = 4, byrow = TRUE)
colnames(Q_0) <- c("vector", "relationship", "algebra", "visualization")
Q_00 <- do.call(rbind,replicate(5, Q_0, simplify = FALSE))
# Content areas: 1 = kinematics; 2 = forces; 3 = energy; 4 = momentum
content_area <- rep(c(1:S), each = J/S)
# Create 5 parallel small item bank for the linear test
set.seed(1972)
for (i in 1:5) {
assign(
paste0("itembank_", i),
cbind(
item_id = paste0(i, sprintf("%02d", 1:J)),
slipping = round(runif(J, .05, .25), 3),
guessing = round(runif(J, .05, .25), 3),
Q_00[sample(nrow(Q_00)), ],
content_area = as.numeric(content_area)
)
)
}
# Create the comprehensive item bank and Q matrix for the CD-CAT
itembank_com <- apply(rbind(itembank_1,itembank_2,itembank_3,itembank_4,itembank_5),2,as.numeric)
itembank_CD_CAT <- itembank_com[sample(nrow(itembank_com)),]
itembank_linear = list(apply(itembank_1,2,as.numeric),
apply(itembank_2,2,as.numeric),
apply(itembank_3,2,as.numeric),
apply(itembank_4,2,as.numeric),
apply(itembank_5,2,as.numeric))
#==============================================================================
#==============================================================================
# Step 2: Examinee Generation
sim_num <- 100 # replication times
N <- 200 # Sample size
# Initialize matrix to store the generated attribute patterns
KS_0 <- matrix(NA, nrow = N, ncol = K*sim_num)
set.seed(1222) # Set seed for reproducibility
for (s in 1:sim_num){
# Simulate attribute patterns
# Define the attribute patterns and their probabilities
patterns <- c("0000", "0001", "0010", "0100", "1000",  # low mastery
"1100", "1010", "1001", "0110", "0101", "0011", # medium mastery
"1110", "1101", "1011", "0111", "1111") # high mastery
probabilities <- c(.01,.05,.05,.05,.05,
.1,.1,.1,.1,.1,.1,
.05,.05,.05,.05,.01)
# Normalize the probabilities to sum to 1
probabilities <- probabilities / sum(probabilities)
# Function to simulate the pattern selection based on defined probabilities
for (j in 1:N) {
selected_pattern <- sample(patterns, 1, prob = probabilities)
KS_0[j,c(((K*s)-3):(K*s))] <- as.numeric(unlist(strsplit(selected_pattern, "")))
}
write.csv(KS_0, file = "Examinee Generation.csv")
}
#==============================================================================
#==============================================================================
# Step 3: linear test
# Initialize storage for results
PCCR_linear <- numeric(sim_num)
ACCR_linear <-  matrix(NA, nrow = sim_num, ncol = K)
KS_EAP_linear <- matrix(NA, nrow = N, ncol = K*sim_num)
set.seed(1112) # Set seed for reproducibility
for (s in 1:sim_num){
for (i in 1:N) {
# randomly select one test from the 5 parallel small item bank
itembank_0 = itembank_linear[[sample(1:length(itembank_linear), 1)]]
Q_linear = itembank_0[, c(4,5,6,7), drop = FALSE]
eta <- ETA(1, KS_0[i,c(((K*s)-3):(K*s))], Q_linear)
# simulate the responses of examinee
response <- response.gen(1, itembank_0[,2], itembank_0[,3], eta)
vec <- c(0,1)
# calculating permutations with replacement
alpha_all <- permutations(n=2,r=K,v=vec,repeats.allowed=T)
like <- numeric(nrow(alpha_all))
for (w in 1:nrow(alpha_all)){
alpha.trial <- alpha_all[w,]
eta0 <- ETA(1,alpha.trial,Q_linear)
# calculate the likelihood for each knowledge state
p0 <- numeric(J)
for (m in 1:J) {
p0[m] <- ((1 - itembank_0[m,2])^eta0[m])*(itembank_0[m,3]^(1-eta0[m]))
}
like[w] <- Xi.likelihood(1,J,p0,response)
}
# prior_probabilities
prior <- rep(1 / nrow(alpha_all), nrow(alpha_all))
# post probabilities
post <- (prior*like)/sum(prior*like)
# Calculate EAP for each attribute
EAP <- numeric(K)  # K is the number of attributes
for (kk in 1:K) {
# Get the column corresponding to the k-th attribute (i.e., all values for attribute k across all patterns)
alpha_k_values <- alpha_all[, kk]
# EAP for the k-th attribute is the weighted sum of the attribute values (0 or 1) using the posterior probabilities
EAP[kk] <- sum(alpha_k_values * post)
if(EAP[kk] > 0.5){
KS_EAP_linear[i,(((K*s)-K)+kk)] = 1
} else {
KS_EAP_linear[i,(((K*s)-K)+kk)] = 0
}
}
}
# The accuracy of attributes estimation
PCCR_linear[s] <- round(PCCR(KS_0[,c(((K*s)-3):(K*s))],KS_EAP_linear[,c(((K*s)-3):(K*s))]),3)
ACCR_linear[s,] <- round(ACCR(KS_0[,c(((K*s)-3):(K*s))],KS_EAP_linear[,c(((K*s)-3):(K*s))]),3)
write.csv(KS_EAP_linear,file = "KS_EAP_linear.csv")
write.csv(PCCR_linear,file = "PCCR_linear.csv")
write.csv(ACCR_linear,file = "ACCR_linear.csv")
}
#----------- load useful packages ----------#
library(CcdcatR) # useful functions
library(MASS) # For statistical functions
library(gtools) # For combination calculations
#==============================================================================
#==============================================================================
# Simulation parameters
sim_num <- 1 # replication times
K <- 4  # Number of attributes
S <- 4 # Number of content areas
J <- 32 # Total number of items in each linear item pool
N <- 200 # Sample size for one test
M <- c(16,24,32) # Fixed test length for CD-CAT
lower <- 1 # lower bound for each content area
upper <- ceiling(M/S) # upper bound for each content area
min_attr <- ceiling(M/K) # the minimum number of items required that measures each attribute
#==============================================================================
#==============================================================================
# Step1: Item Bank Design and Calibration
itembank_CD_CAT <- matrix(NA, nrow = J*5, ncol = 8*sim_num)
itembank_linear <- matrix(NA, nrow = J*sim_num, ncol = 8*5)
# Create basic matrix units
Q_0 <- matrix(c(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1), nrow = 4, byrow = TRUE)
colnames(Q_0) <- c("vector", "relationship", "algebra", "visualization")
Q_00 <- do.call(rbind,replicate(8, Q_0, simplify = FALSE))
# Content areas: 1 = kinematics; 2 = forces; 3 = energy; 4 = momentum
content_area <- rep(c(1:S), each = J/S)
set.seed(1972)
for (s in 1:sim_num){
# Create 5 parallel small item bank for the linear test
for (i in 1:5) {
assign(paste0("itembank_", i),
cbind(
item_id = paste0(s,i, sprintf("%02d", 1:J)),
slipping = round(runif(J, .05, .25), 3),
guessing = round(runif(J, .05, .25), 3),
Q_00,
content_area = as.numeric(content_area)
)
)
}
# Create the comprehensive item bank and Q matrix for the CD-CAT
itembank_com <- apply(rbind(itembank_1,itembank_2,itembank_3,itembank_4,itembank_5),2,as.numeric)
itembank_CD_CAT[,c(((s*8)-7):(s*8))] <- itembank_com[sample(nrow(itembank_com)),]
itembank_linear[c(((J*s)-(J-1)):(J*s)),] = cbind(apply(itembank_1,2,as.numeric),
apply(itembank_2,2,as.numeric),
apply(itembank_3,2,as.numeric),
apply(itembank_4,2,as.numeric),
apply(itembank_5,2,as.numeric))
}
#==============================================================================
#==============================================================================
# Step 2: Examinee Generation
KS_0 <- matrix(NA, nrow = N, ncol = K*sim_num)
# Define the attribute patterns and their probabilities
patterns <- c("0000", "0001", "0010", "0100", "1000",  # low mastery
"1100", "1010", "1001", "0110", "0101", "0011", # medium mastery
"1110", "1101", "1011", "0111", "1111") # high mastery
probabilities <- c(.05,0.0625,0.0625,0.0625,0.0625,
.067,.067,.067,.067,.067,.067,
0.0625,0.0625,0.0625,0.0625,.05)
probabilities <- probabilities / sum(probabilities) # Normalize the probabilities to sum to 1
set.seed(1222) # Set seed for reproducibility
for (s in 1:sim_num){
for (j in 1:N) {
selected_pattern <- sample(patterns, 1, prob = probabilities)
KS_0[j,c(((K*s)-3):(K*s))] <- as.numeric(unlist(strsplit(selected_pattern, "")))
}
}
#==============================================================================
#==============================================================================
# Step 3: linear test
PCCR_linear <- numeric(sim_num)
ACCR_linear <-  matrix(NA, nrow = sim_num, ncol = K)
KS_EAP_linear <- matrix(NA, nrow = N, ncol = K*sim_num)
set.seed(1112) # Set seed for reproducibility
for (s in 1:sim_num){
for (i in 1:N) {
# randomly select one test from the 5 parallel linear item bank
col_groups <- split(1:ncol(itembank_linear), ceiling((1:ncol(itembank_linear)) / 8))
selected_linear <- sample(1:length(col_groups), size = 1)
selected_cols <- col_groups[[selected_linear]]
itembank_0 = itembank_linear[c(((J*s)-(J-1)):(J*s)),selected_cols]
Q_linear = itembank_0[, c(4,5,6,7), drop = FALSE]
eta <- ETA(1, KS_0[i,c(((K*s)-3):(K*s))], Q_linear)
# simulate the responses of examinee
response <- response_gen(1, itembank_0[,2], itembank_0[,3], eta)
KS_EAP_linear[i,c(((K*s)-3):(K*s))] <- EAP_estimation(itembank_0,response,K)
}
# The accuracy of attributes estimation
PCCR_linear[s] <- round(PCCR(KS_0[,c(((K*s)-3):(K*s))],KS_EAP_linear[,c(((K*s)-3):(K*s))]),3)
ACCR_linear[s,] <- round(ACCR(KS_0[,c(((K*s)-3):(K*s))],KS_EAP_linear[,c(((K*s)-3):(K*s))]),3)
}
#==============================================================================
#==============================================================================
# Step 4: CD-CAT
# You need to change the values for different conditions
M0 = M[3]
min_con0 = upper[3]
ETA(1, KS_0[i,c(((K*s)-3):(K*s))], Q_linear)
response_gen(1, itembank_0[,2], itembank_0[,3], eta)
EAP_estimation(itembank_0,response,K)
?EAP_estimation
CcdcatR::EAP_estimation(itembank_0, response, K)
CcdcatR::EAP_estimation(itembank, response, K)
devtools::document()
setwd("/Users/jing/Documents/GitHub/CcdcatR/_drafts/CcdcatR")
devtools::document()
#----------- load useful packages ----------#
library(CcdcatR) # useful functions
itembank_linear
response_gen(1, itembank_0[,2], itembank_0[,3], eta)
EAP_estimation(itembank_0,response,K)
# simulate the responses of examinee
response <- response_gen(1, itembank_0[,2], itembank_0[,3], eta)
KS_EAP_linear[i,c(((K*s)-3):(K*s))] <- EAP_estimation(itembank_0,response,K)
KS_EAP_linear
#==============================================================================
#==============================================================================
# Step 3: linear test
PCCR_linear <- numeric(sim_num)
ACCR_linear <-  matrix(NA, nrow = sim_num, ncol = K)
KS_EAP_linear <- matrix(NA, nrow = N, ncol = K*sim_num)
set.seed(1112) # Set seed for reproducibility
for (s in 1:sim_num){
for (i in 1:N) {
# randomly select one test from the 5 parallel linear item bank
col_groups <- split(1:ncol(itembank_linear), ceiling((1:ncol(itembank_linear)) / 8))
selected_linear <- sample(1:length(col_groups), size = 1)
selected_cols <- col_groups[[selected_linear]]
itembank_0 = itembank_linear[c(((J*s)-(J-1)):(J*s)),selected_cols]
Q_linear = itembank_0[, c(4,5,6,7), drop = FALSE]
eta <- ETA(1, KS_0[i,c(((K*s)-3):(K*s))], Q_linear)
# simulate the responses of examinee
response <- response_gen(1, itembank_0[,2], itembank_0[,3], eta)
KS_EAP_linear[i,c(((K*s)-3):(K*s))] <- EAP_estimation(itembank_0,response,K)
}
# The accuracy of attributes estimation
PCCR_linear[s] <- round(PCCR(KS_0[,c(((K*s)-3):(K*s))],KS_EAP_linear[,c(((K*s)-3):(K*s))]),3)
ACCR_linear[s,] <- round(ACCR(KS_0[,c(((K*s)-3):(K*s))],KS_EAP_linear[,c(((K*s)-3):(K*s))]),3)
}
PCCR_linear
ACCR_linear
#==============================================================================
#==============================================================================
# Step 4: CD-CAT
# You need to change the values for different conditions
M0 = M[3]
min_con0 = upper[3]
min_attr0 = min_attr[3]
PCCR_CD_CAT <- numeric(sim_num)
ACCR_CD_CAT <-  matrix(NA, nrow = sim_num, ncol = K)
KS_EAP_CD_CAT <- matrix(NA, nrow = N, ncol = K*sim_num)
# Set seed for JSD & M[1,2,3] reproducibility
# set.seed(19964)
# set.seed(19965)
set.seed(19966)
for (ss in 1:sim_num){
itembank_CD_CAT0 <- itembank_CD_CAT[,c(((ss*8)-7):(ss*8))]
used_items_id <- integer(0)
used_attr_num <- matrix(0,nrow = 1, ncol = K)
used_cont_num <- matrix(0,nrow = 1, ncol = S)
Q <- itembank_CD_CAT0[,c(4,5,6,7)]
for(i in 1:N){
# 1. select the first group items
# Select first items considering both the content and attribute balancing
num_first <- lower*K
selected_items <- matrix(NA, nrow = num_first, ncol = dim(itembank_CD_CAT0)[2])
content_areas <- unique(selected_items[, 8])
while (length(content_areas) < 4) {
for (ii in 1:K) {
sub_itembank <- itembank_CD_CAT0[which(itembank_CD_CAT0[, (ii + 3)] == 1), , drop = FALSE]
selected_items[ii,] <- sub_itembank[sample(1:nrow(sub_itembank), 1), , drop = FALSE]
}
content_areas <- unique(selected_items[, 8])
}
first_items_id <- selected_items[,1]
# 2. update the used item information
used_items <- itembank_CD_CAT0[which(itembank_CD_CAT0[,1] %in% first_items_id),]
for(nn in 1:K){
used_attr_num[,nn] <- sum(used_items[,(nn+3)])
for(sss in 1:S){
used_cont_num[,sss] <- nrow(used_items[which(used_items[,8] %in% sss),,drop = FALSE])
}
}
used_items_id <- used_items[,1]
# 3. estimate the responses for the first selected items
eta <- ETA(1, KS_0[i,c(((K*ss)-3):(K*ss))], used_items[, c(4,5,6,7), drop = FALSE])
response <- response_gen(1, used_items[,2], used_items[,2], eta)
while (length(used_items_id) < M0) {
# 4. update the EAP for the current examinee
KS_EAP_CD_CAT[i,c(((K*ss)-3):(K*ss))] <- EAP_estimation(used_items,response,K)
# 5. defined the unused items
unused_items <- itembank_CD_CAT0[!itembank_CD_CAT0[,1] %in% used_items_id,]
# 6. select the next item for the examinee
# the current KS estimation
KS_estimate <- KS_EAP_CD_CAT[i, c(((K*ss)-3):(K*ss)), drop = FALSE]
# (a) posterior-weighted Kullback-Leibler information
PWKL_estimation <- PWKLest(K,unused_items,KS_estimate)
# (b) Jensen-Shannon divergence index
JSD_estimation <- JSDest(K,unused_items)
#----compute an attribute-balancing index----
unused_Q <- unused_items[,c(4,5,6,7)]
attr_weight <- numeric(nrow(unused_items))
for (tt in 1:nrow(unused_items)) {
attr_weight[tt] <- prod(((min_attr0 - used_attr_num)/min_attr0)^unused_Q[tt,])
}
#----compute an content-balancing index----
cont_weight <- numeric(nrow(unused_items))
# create a C matrix imitate Q matrix
C = matrix(0,nrow = nrow(unused_items), ncol = S)
for (cc in 1:nrow(unused_items)){
v <-  as.numeric(unused_items[,8])
C[cc, v[cc]] <- 1  # Update the value to 1 based on the vector
}
for (tc in 1:nrow(unused_items)) {
cont_weight[tc] <- prod(((min_con0 - used_cont_num)/min_con0)^C[tc,])
}
# Final Item Selection Index (ISI)
# ISI <- attr_weight*cont_weight*PWKL_estimation
ISI <- attr_weight*cont_weight*JSD_estimation
selected_next_item_id <- unused_items[which.max(ISI),1]
selected_next_item <- unused_items[which(unused_items[,1] %in% selected_next_item_id), ,drop = FALSE]
# 7. update the used item information
used_items_id0 <- c(used_items_id, as.numeric(selected_next_item_id))
used_items <- itembank_CD_CAT0[which(itembank_CD_CAT0[,1] %in% used_items_id0),]
for(nn in 1:K){
used_attr_num[,nn] <- sum(used_items[,(nn+3)])
for(sss in 1:S){
used_cont_num[,sss] <- nrow(used_items[which(used_items[,8] %in% sss),,drop = FALSE])
}
}
used_items_id <- used_items[,1]
# 8. update the response
eat_next <- ETA(1, KS_0[i,c(((K*ss)-3):(K*ss))], selected_next_item[, c(4,5,6,7), drop = FALSE])
response_next <- response_gen(1, selected_next_item[,2], selected_next_item[,3], eat_next)
index_next <- which(used_items[,1] %in% selected_next_item_id)
response <- append(response, response_next, after = index_next-1)
}
}
# The accuracy of attributes estimation
PCCR_CD_CAT[ss] <- round(PCCR(KS_0[,c(((K*ss)-3):(K*ss))],KS_EAP_CD_CAT[,c(((K*ss)-3):(K*ss))]),3)
ACCR_CD_CAT[ss,] <- round(ACCR(KS_0[,c(((K*ss)-3):(K*ss))],KS_EAP_CD_CAT[,c(((K*ss)-3):(K*ss))]),3)
}
PCCR_CD_CAT
ACCR_CD_CAT
devtools::build()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
git init
git init
git init
